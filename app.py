import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression

st.set_page_config(
    page_title="Titanic Survival App",  # ‚Üê le nom que tu veux voir dans l‚Äôonglet
    page_icon="üö¢",                     # ‚Üê emoji ou URL d'ic√¥ne perso
    layout="centered"
)

# 1. Entra√Ænement du mod√®le
df = pd.read_csv("train.csv")

# Pr√©traitement l√©ger
df = df[['Sex', 'Pclass', 'Age', 'Survived']].dropna()
df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})

X = df[['Sex', 'Pclass', 'Age']]
y = df['Survived']

model = LogisticRegression(max_iter=1000)
model.fit(X, y)

# 2. Interface utilisateur
st.title("üõ≥Ô∏è Titanic - Pr√©diction de survie")

st.markdown("Entrez les infos d‚Äôun passager pour voir s‚Äôil aurait surv√©cu.")

sex = st.selectbox("Sexe", options=["Homme", "Femme"])
pclass = st.selectbox("Classe", options=[1, 2, 3])
age = st.slider("√Çge", 0, 100, 25)

# Pr√©paration des donn√©es pour pr√©diction
sex_encoded = 0 if sex == "Homme" else 1
input_data = np.array([[sex_encoded, pclass, age]])

# 3. Pr√©diction
if st.button("Pr√©dire la survie"):
    prediction = model.predict(input_data)[0]
    probas = model.predict_proba(input_data)[0]
    
    if prediction == 1:
        st.success(f"‚úÖ Ce passager aurait surv√©cu (probabilit√© : {round(probas[1]*100, 2)}%)")
    else:
        st.error(f"‚ùå Ce passager n‚Äôaurait pas surv√©cu (probabilit√© : {round(probas[0]*100, 2)}%)")
